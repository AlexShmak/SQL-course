-- Drop tables if they exist to allow for re-creation
DROP TABLE IF EXISTS PASSENGER CASCADE;

DROP TABLE IF EXISTS FLIGHT_SERVICE CASCADE;

DROP TABLE IF EXISTS FLIGHT_BOOKINGS CASCADE;

DROP TABLE IF EXISTS FLIGHT CASCADE;

DROP TABLE IF EXISTS EMPLOYEE CASCADE;

DROP TABLE IF EXISTS CUSTOMER CASCADE;

DROP TABLE IF EXISTS BOOKING CASCADE;

DROP TABLE IF EXISTS AIRPORT CASCADE;

DROP TABLE IF EXISTS AIRCRAFT CASCADE;

-- Create tables with CHECK constraints
CREATE TABLE AIRCRAFT (
	AIRCRAFT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	MODEL CHARACTER VARYING(100) NOT NULL,
	CAPACITY INTEGER NOT NULL CHECK (CAPACITY > 0) -- Ensure capacity is positive
);

CREATE TABLE AIRPORT (
	AIRPORT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(100) NOT NULL,
	CITY CHARACTER VARYING(100) NOT NULL,
	COUNTRY CHARACTER VARYING(100) NOT NULL
);

CREATE TABLE BOOKING (
	BOOKING_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	BOOKING_DATE_TIME TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PAYMENT_METHOD CHARACTER VARYING(20) NOT NULL CHECK (
		PAYMENT_METHOD IN ('Credit Card', 'Debit Card', 'Cash')
	), -- Only allow specific payment methods
	RESERVED_SEATS INTEGER[] NOT NULL UNIQUE,
	CUSTOMER_ID INTEGER NOT NULL,
	FLIGHT_ID INTEGER NOT NULL
);

CREATE TABLE CUSTOMER (
	CUSTOMER_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	EMAIL CHARACTER VARYING(50) NOT NULL CHECK (EMAIL LIKE '%@%.%'), -- Validate email format
	PHONE CHARACTER VARYING(50) NOT NULL CHECK (LENGTH(PHONE) >= 10) -- Ensure valid phone length
);

CREATE TABLE EMPLOYEE (
	EMPLOYEE_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	OCCUPATION CHARACTER VARYING(50) NOT NULL CHECK (
		OCCUPATION IN ('Pilot', 'Co-Pilot', 'Cabin Crew', 'Maintenance')
	), -- Restricted occupations
	FLIGHT_SERVICE_ID INTEGER NOT NULL
);

CREATE TABLE FLIGHT (
	FLIGHT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FLIGHT_NUMBER CHARACTER VARYING(10) NOT NULL,
	DEPARTURE_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL CHECK (DEPARTURE_DATE > CURRENT_TIMESTAMP), -- Flights must be in the future
	ARRIVAL_DATA TIMESTAMP WITHOUT TIME ZONE NOT NULL CHECK (ARRIVAL_DATA > DEPARTURE_DATE), -- Arrival after departure
	ECONOMY_CLASS_SEATS_FIRST_NUMBER INTEGER NOT NULL CHECK (ECONOMY_CLASS_SEATS_FIRST_NUMBER >= 0),
	ECONOMY_CLASS_SEATS_LAST_NUMBER INTEGER NOT NULL CHECK (ECONOMY_CLASS_SEATS_LAST_NUMBER >= 0),
	BUSINESS_CLASS_SEATS_FIRST_NUMBER INTEGER NOT NULL CHECK (BUSINESS_CLASS_SEATS_FIRST_NUMBER >= 0),
	BUSINESS_CLASS_SEATS_LAST_NUMBER INTEGER NOT NULL CHECK (BUSINESS_CLASS_SEATS_LAST_NUMBER >= 0),
	ECONOMY_CLASS_TICKET_PRICE INTEGER NOT NULL CHECK (ECONOMY_CLASS_TICKET_PRICE >= 0),
	BUSINESS_CLASS_TICKET_PRICE INTEGER NOT NULL CHECK (BUSINESS_CLASS_TICKET_PRICE >= 0),
	DEPARTURE_AIRPORT_ID INTEGER NOT NULL,
	ARRIVAL_AIRPORT_ID INTEGER NOT NULL CHECK (ARRIVAL_AIRPORT_ID <> DEPARTURE_AIRPORT_ID), -- Departure and arrival cannot be the same
	FLIGHT_SERVICE_ID INTEGER NOT NULL,
	FLIGHT_BOOKING_ID INTEGER NOT NULL,
	CONSTRAINT FLIGHT_FLIGHT_NUMBER_KEY UNIQUE (FLIGHT_NUMBER)
);

CREATE TABLE FLIGHT_BOOKINGS (
	FLIGHT_BOOKING_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	ECONOMY_CLASS_SEATS_BOOKED INTEGER DEFAULT 0 CHECK (ECONOMY_CLASS_SEATS_BOOKED >= 0),
	BUSINESS_CLASS_SEATS_BOOKED INTEGER DEFAULT 0 CHECK (BUSINESS_CLASS_SEATS_BOOKED >= 0)
);

CREATE TABLE PASSENGER (
	PASSENGER_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	PASSPORT_NUMBER CHARACTER VARYING(20) NOT NULL CHECK (LENGTH(PASSPORT_NUMBER) > 5), -- Ensure valid passport format
	CITIZENSHIP CHARACTER VARYING(50) NOT NULL,
	BOOKING_ID INTEGER NOT NULL,
	CONSTRAINT PASSENGER_PASSPORT_NUMBER_KEY UNIQUE (PASSPORT_NUMBER)
);

CREATE TABLE FLIGHT_SERVICE (
	FLIGHT_SERVICE_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	AIRCRAFT_ID INTEGER NOT NULL
);

-- Add foreign keys with existing constraints
ALTER TABLE BOOKING
ADD CONSTRAINT BOOKING_CUSTOMER_ID_FKEY FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BOOKING
ADD CONSTRAINT BOOKING_FLIGHT_ID_FKEY FOREIGN KEY (FLIGHT_ID) REFERENCES FLIGHT (FLIGHT_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE EMPLOYEE
ADD CONSTRAINT EMPLOYEE_FLIGHT_SERVICE_ID_FKEY FOREIGN KEY (FLIGHT_SERVICE_ID) REFERENCES FLIGHT_SERVICE (FLIGHT_SERVICE_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE FLIGHT
ADD CONSTRAINT FLIGHT_ARRIVAL_AIRPORT_ID_FKEY FOREIGN KEY (ARRIVAL_AIRPORT_ID) REFERENCES AIRPORT (AIRPORT_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;

ALTER TABLE FLIGHT
ADD CONSTRAINT FLIGHT_DEPARTURE_AIRPORT_ID_FKEY FOREIGN KEY (DEPARTURE_AIRPORT_ID) REFERENCES AIRPORT (AIRPORT_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;

ALTER TABLE FLIGHT
ADD CONSTRAINT FLIGHT_FLIGHT_BOOKING_ID_FKEY FOREIGN KEY (FLIGHT_BOOKING_ID) REFERENCES FLIGHT_BOOKINGS (FLIGHT_BOOKING_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;

ALTER TABLE FLIGHT
ADD CONSTRAINT FLIGHT_FLIGHT_SERVICE_ID_FKEY FOREIGN KEY (FLIGHT_SERVICE_ID) REFERENCES FLIGHT_SERVICE (FLIGHT_SERVICE_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE;

ALTER TABLE PASSENGER
ADD CONSTRAINT PASSENGER_BOOKING_ID_FKEY FOREIGN KEY (BOOKING_ID) REFERENCES BOOKING (BOOKING_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE FLIGHT_SERVICE
ADD CONSTRAINT FLIGHT_SERVICE_AIRCRAFT_ID_FKEY FOREIGN KEY (AIRCRAFT_ID) REFERENCES AIRCRAFT (AIRCRAFT_ID) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;

-- Trigger 
CREATE
OR REPLACE FUNCTION UPDATE_FLIGHT_BOOKINGS () RETURNS TRIGGER AS $$
DECLARE
    economy_count INTEGER;
    business_count INTEGER;
BEGIN
    -- Count the number of economy class seats booked
    economy_count := (
        SELECT COUNT(*)
        FROM BOOKING B
        JOIN FLIGHT F ON B.FLIGHT_ID = F.FLIGHT_ID
        WHERE B.FLIGHT_ID = NEW.FLIGHT_ID
        AND B.PAYMENT_METHOD IS NOT NULL
		AND (
          SELECT BOOL_AND(seat >= F.ECONOMY_CLASS_SEATS_FIRST_NUMBER AND seat <= F.ECONOMY_CLASS_SEATS_LAST_NUMBER)
          FROM unnest(B.RESERVED_SEATS) AS seat
      )
    );

    -- Count the number of business class seats booked
    business_count := (
        SELECT COUNT(*)
        FROM BOOKING B
        JOIN FLIGHT F ON B.FLIGHT_ID = F.FLIGHT_ID
        WHERE B.FLIGHT_ID = NEW.FLIGHT_ID
        AND B.PAYMENT_METHOD IS NOT NULL
        AND (
          SELECT BOOL_AND(seat >= F.BUSINESS_CLASS_SEATS_FIRST_NUMBER AND seat <= F.BUSINESS_CLASS_SEATS_LAST_NUMBER)
          FROM unnest(B.RESERVED_SEATS) AS seat
	  )
    );

    -- Update the corresponding flight booking record
    UPDATE FLIGHT_BOOKINGS
    SET
        ECONOMY_CLASS_SEATS_BOOKED = economy_count,
        BUSINESS_CLASS_SEATS_BOOKED = business_count
    WHERE FLIGHT_BOOKING_ID = (SELECT FLIGHT_BOOKING_ID FROM FLIGHT WHERE FLIGHT_ID = NEW.FLIGHT_ID);

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER BOOKING_INSERT_UPDATE
AFTER INSERT
OR
UPDATE ON BOOKING FOR EACH ROW
EXECUTE FUNCTION UPDATE_FLIGHT_BOOKINGS ();