-- Drop tables if they exist to allow for re-creation
DROP TABLE IF EXISTS SERVICE_CLASSES_INFO CASCADE;

DROP TABLE IF EXISTS PASSENGER CASCADE;

DROP TABLE IF EXISTS FLIGHT_SERVICE CASCADE;

DROP TABLE IF EXISTS FLIGHT_BOOKINGS CASCADE;

DROP TABLE IF EXISTS FLIGHT CASCADE;

DROP TABLE IF EXISTS EMPLOYEE CASCADE;

DROP TABLE IF EXISTS CUSTOMER CASCADE;

DROP TABLE IF EXISTS BOOKING CASCADE;

DROP TABLE IF EXISTS AIRPORT CASCADE;

DROP TABLE IF EXISTS AIRCRAFT CASCADE;

-- Create tables with CHECK constraints
CREATE TABLE AIRCRAFT (
	AIRCRAFT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	MODEL CHARACTER VARYING(100) NOT NULL,
	CAPACITY INTEGER NOT NULL CHECK (CAPACITY > 0)
);

CREATE TABLE AIRPORT (
	AIRPORT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(100) NOT NULL,
	CITY CHARACTER VARYING(100) NOT NULL,
	COUNTRY CHARACTER VARYING(100) NOT NULL
);

CREATE TABLE CUSTOMER (
	CUSTOMER_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	EMAIL CHARACTER VARYING(50) NOT NULL CHECK (EMAIL LIKE '%@%.%'),
	PHONE CHARACTER VARYING(50) NOT NULL CHECK (LENGTH(PHONE) >= 10)
);

CREATE TABLE SERVICE_CLASSES_INFO (
	SERVICE_CLASSES_INFO_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	ECONOMY_CLASS_TOTAL_SEATS INTEGER NOT NULL CHECK (ECONOMY_CLASS_TOTAL_SEATS > 0),
	BUSINESS_CLASS_TOTAL_SEATS INTEGER NOT NULL CHECK (BUSINESS_CLASS_TOTAL_SEATS > 0),
	ECONOMY_CLASS_TICKET_PRICE INTEGER NOT NULL CHECK (ECONOMY_CLASS_TICKET_PRICE > 0),
	BUSINESS_CLASS_TICKET_PRICE INTEGER NOT NULL CHECK (BUSINESS_CLASS_TICKET_PRICE > 0)
);

CREATE TABLE FLIGHT_SERVICE (
	FLIGHT_SERVICE_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	AIRCRAFT_ID INTEGER NOT NULL REFERENCES AIRCRAFT (AIRCRAFT_ID)
);

CREATE TABLE FLIGHT_BOOKINGS (
	FLIGHT_BOOKING_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	ECONOMY_CLASS_SEATS_BOOKED INTEGER DEFAULT 0 CHECK (ECONOMY_CLASS_SEATS_BOOKED >= 0),
	BUSINESS_CLASS_SEATS_BOOKED INTEGER DEFAULT 0 CHECK (BUSINESS_CLASS_SEATS_BOOKED >= 0)
);

CREATE TABLE FLIGHT (
	FLIGHT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FLIGHT_NUMBER CHARACTER VARYING(10) NOT NULL UNIQUE,
	DEPARTURE_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL CHECK (DEPARTURE_DATE > CURRENT_TIMESTAMP),
	ARRIVAL_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL CHECK (ARRIVAL_DATE > DEPARTURE_DATE),
	DEPARTURE_AIRPORT_ID INTEGER NOT NULL REFERENCES AIRPORT (AIRPORT_ID),
	ARRIVAL_AIRPORT_ID INTEGER NOT NULL REFERENCES AIRPORT (AIRPORT_ID) CHECK (ARRIVAL_AIRPORT_ID <> DEPARTURE_AIRPORT_ID),
	FLIGHT_SERVICE_ID INTEGER NOT NULL REFERENCES FLIGHT_SERVICE (FLIGHT_SERVICE_ID),
	FLIGHT_BOOKING_ID INTEGER NOT NULL REFERENCES FLIGHT_BOOKINGS (FLIGHT_BOOKING_ID),
	SERVICE_CLASSES_INFO_ID INTEGER NOT NULL REFERENCES SERVICE_CLASSES_INFO (SERVICE_CLASSES_INFO_ID)
);

CREATE TABLE BOOKING (
	BOOKING_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	BOOKING_DATE_TIME TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PAYMENT_METHOD CHARACTER VARYING(20) NOT NULL CHECK (
		PAYMENT_METHOD IN ('Credit Card', 'Debit Card', 'Cash')
	),
	RESERVED_SEATS INTEGER[] NOT NULL,
	CUSTOMER_ID INTEGER NOT NULL REFERENCES CUSTOMER (CUSTOMER_ID),
	FLIGHT_ID INTEGER NOT NULL REFERENCES FLIGHT (FLIGHT_ID)
);

CREATE TABLE PASSENGER (
	PASSENGER_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	PASSPORT_NUMBER CHARACTER VARYING(20) NOT NULL UNIQUE CHECK (LENGTH(PASSPORT_NUMBER) > 5),
	CITIZENSHIP CHARACTER VARYING(50) NOT NULL,
	BOOKING_ID INTEGER NOT NULL REFERENCES BOOKING (BOOKING_ID)
);

CREATE TABLE EMPLOYEE (
	EMPLOYEE_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	FIRST_NAME CHARACTER VARYING(50) NOT NULL,
	LAST_NAME CHARACTER VARYING(50) NOT NULL,
	OCCUPATION CHARACTER VARYING(50) NOT NULL CHECK (
		OCCUPATION IN ('Pilot', 'Co-Pilot', 'Cabin Crew', 'Maintenance')
	),
	FLIGHT_SERVICE_ID INTEGER NOT NULL REFERENCES FLIGHT_SERVICE (FLIGHT_SERVICE_ID)
);

-- Trigger Function
CREATE
OR REPLACE FUNCTION UPDATE_FLIGHT_BOOKINGS () RETURNS TRIGGER AS $$
DECLARE
    economy_count INTEGER;
    business_count INTEGER;
BEGIN
    -- Count the number of economy class seats booked
    economy_count := (
        SELECT COUNT(*)
        FROM BOOKING B
        JOIN FLIGHT F ON B.FLIGHT_ID = F.FLIGHT_ID
        JOIN SERVICE_CLASSES_INFO SCI ON F.SERVICE_CLASSES_INFO_ID = SCI.SERVICE_CLASSES_INFO_ID
        WHERE B.FLIGHT_ID = NEW.FLIGHT_ID
        AND B.PAYMENT_METHOD IS NOT NULL
        AND (
            SELECT BOOL_AND(seat BETWEEN 1 AND SCI.ECONOMY_CLASS_TOTAL_SEATS)
            FROM unnest(B.RESERVED_SEATS) AS seat
        )
    );

    -- Count the number of business class seats booked
    business_count := (
        SELECT COUNT(*)
        FROM BOOKING B
        JOIN FLIGHT F ON B.FLIGHT_ID = F.FLIGHT_ID
        JOIN SERVICE_CLASSES_INFO SCI ON F.SERVICE_CLASSES_INFO_ID = SCI.SERVICE_CLASSES_INFO_ID
        WHERE B.FLIGHT_ID = NEW.FLIGHT_ID
        AND B.PAYMENT_METHOD IS NOT NULL
        AND (
            SELECT BOOL_AND(
                seat BETWEEN (SCI.ECONOMY_CLASS_TOTAL_SEATS + 1)
                AND (SCI.ECONOMY_CLASS_TOTAL_SEATS + SCI.BUSINESS_CLASS_TOTAL_SEATS)
            )
            FROM unnest(B.RESERVED_SEATS) AS seat
        )
    );

    -- Update the corresponding flight booking record
    UPDATE FLIGHT_BOOKINGS
    SET
        ECONOMY_CLASS_SEATS_BOOKED = economy_count,
        BUSINESS_CLASS_SEATS_BOOKED = business_count
    WHERE FLIGHT_BOOKING_ID = (SELECT FLIGHT_BOOKING_ID FROM FLIGHT WHERE FLIGHT_ID = NEW.FLIGHT_ID);

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

-- Trigger Definition
CREATE TRIGGER BOOKING_INSERT_UPDATE
AFTER INSERT
OR
UPDATE ON BOOKING FOR EACH ROW
EXECUTE FUNCTION UPDATE_FLIGHT_BOOKINGS ();

-- Create INDEXes for potentially most used tables' fields
CREATE INDEX IDX_AIRCRAFT_MODEL ON AIRCRAFT (MODEL);

CREATE INDEX IDX_AIRPORT_NAME ON AIRPORT (NAME);

CREATE INDEX IDX_AIRPORT_CITY_COUNTRY ON AIRPORT (CITY, COUNTRY);

CREATE INDEX IDX_CUSTOMER_EMAIL ON CUSTOMER (EMAIL);

CREATE INDEX IDX_CUSTOMER_PHONE ON CUSTOMER (PHONE);

CREATE INDEX IDX_SERVICE_CLASSES_INFO ON SERVICE_CLASSES_INFO (
	ECONOMY_CLASS_TOTAL_SEATS,
	BUSINESS_CLASS_TOTAL_SEATS
);

CREATE INDEX IDX_FLIGHT_SERVICE_AIRCRAFT_ID ON FLIGHT_SERVICE (AIRCRAFT_ID);

CREATE INDEX IDX_FLIGHT_BOOKINGS_ECONOMY_CLASS_SEATS_BOOKED ON FLIGHT_BOOKINGS (ECONOMY_CLASS_SEATS_BOOKED);

CREATE INDEX IDX_FLIGHT_BOOKINGS_BUSINESS_CLASS_SEATS_BOOKED ON FLIGHT_BOOKINGS (BUSINESS_CLASS_SEATS_BOOKED);

CREATE INDEX IDX_FLIGHT_FLIGHT_NUMBER ON FLIGHT (FLIGHT_NUMBER);

CREATE INDEX IDX_FLIGHT_DEPARTURE_AIRPORT ON FLIGHT (DEPARTURE_AIRPORT_ID);

CREATE INDEX IDX_FLIGHT_ARRIVAL_AIRPORT ON FLIGHT (ARRIVAL_AIRPORT_ID);

CREATE INDEX IDX_FLIGHT_DEPARTURE_DATE ON FLIGHT (DEPARTURE_DATE);

CREATE INDEX IDX_FLIGHT_ARRIVAL_DATE ON FLIGHT (ARRIVAL_DATE);

CREATE INDEX IDX_BOOKING_CUSTOMER_ID ON BOOKING (CUSTOMER_ID);

CREATE INDEX IDX_BOOKING_FLIGHT_ID ON BOOKING (FLIGHT_ID);

CREATE INDEX IDX_BOOKING_PAYMENT_METHOD ON BOOKING (PAYMENT_METHOD);

CREATE INDEX IDX_PASSENGER_PASSPORT_NUMBER ON PASSENGER (PASSPORT_NUMBER);

CREATE INDEX IDX_PASSENGER_BOOKING_ID ON PASSENGER (BOOKING_ID);

CREATE INDEX IDX_EMPLOYEE_OCCUPATION ON EMPLOYEE (OCCUPATION);

CREATE INDEX IDX_EMPLOYEE_FLIGHT_SERVICE_ID ON EMPLOYEE (FLIGHT_SERVICE_ID);